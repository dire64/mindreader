{"ast":null,"code":"import { db } from \"./firebase\";\nimport { doc, getDoc, setDoc, updateDoc, arrayUnion, serverTimestamp } from \"firebase/firestore\";\nexport const ChatService = {\n  async getUserData(userId) {\n    try {\n      const userRef = doc(db, \"users\", userId);\n      const userSnap = await getDoc(userRef);\n      if (userSnap.exists()) {\n        return userSnap.data();\n      } else {\n        // Create a new user document if it doesn't exist\n        const newUserData = {\n          name: \"\",\n          chatHistory: [],\n          created_at: serverTimestamp()\n        };\n        await setDoc(userRef, newUserData);\n        return newUserData;\n      }\n    } catch (error) {\n      console.error(\"Error getting user data:\", error);\n      throw error;\n    }\n  },\n  async updateUserName(userId, name) {\n    try {\n      const userRef = doc(db, \"users\", userId);\n      await updateDoc(userRef, {\n        name: name,\n        updated_at: serverTimestamp()\n      });\n    } catch (error) {\n      console.error(\"Error updating user name:\", error);\n      throw error;\n    }\n  },\n  async addMessageToHistory(userId, message, isUser) {\n    try {\n      const userRef = doc(db, \"users\", userId);\n      await updateDoc(userRef, {\n        chatHistory: arrayUnion({\n          content: message,\n          isUser: isUser,\n          timestamp: serverTimestamp()\n        }),\n        last_interaction: serverTimestamp()\n      });\n    } catch (error) {\n      console.error(\"Error adding message to history:\", error);\n      throw error;\n    }\n  },\n  async getLastConversationSummary(userId) {\n    try {\n      const userData = await this.getUserData(userId);\n\n      // If there's already a generated summary, use it\n      if (userData.last_conversation_summary) {\n        return userData.last_conversation_summary;\n      }\n      const chatHistory = userData.chatHistory;\n      if (!chatHistory || chatHistory.length === 0) {\n        return null;\n      }\n\n      // Get the last 5 messages\n      const lastMessages = chatHistory.slice(-5);\n      const summaryText = lastMessages.map(msg => `${msg.isUser ? \"User\" : \"Bot\"}: ${msg.content}`).join(\"\\n\");\n\n      // Update the user document with the new summary\n      const userRef = doc(db, \"users\", userId);\n      await updateDoc(userRef, {\n        last_conversation_summary: summaryText\n      });\n      return summaryText;\n    } catch (error) {\n      console.error(\"Error getting conversation summary:\", error);\n      return null;\n    }\n  },\n  async clearChatHistory(userId) {\n    try {\n      const userRef = doc(db, \"users\", userId);\n      await updateDoc(userRef, {\n        chatHistory: [],\n        last_conversation_summary: null,\n        last_interaction: serverTimestamp()\n      });\n    } catch (error) {\n      console.error(\"Error clearing chat history:\", error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["db","doc","getDoc","setDoc","updateDoc","arrayUnion","serverTimestamp","ChatService","getUserData","userId","userRef","userSnap","exists","data","newUserData","name","chatHistory","created_at","error","console","updateUserName","updated_at","addMessageToHistory","message","isUser","content","timestamp","last_interaction","getLastConversationSummary","userData","last_conversation_summary","length","lastMessages","slice","summaryText","map","msg","join","clearChatHistory"],"sources":["C:/Users/GUES/Documents/GitHub/mindreader/react/src/ChatService.js"],"sourcesContent":["import { db } from \"./firebase\";\r\nimport { doc, getDoc, setDoc, updateDoc, arrayUnion, serverTimestamp } from \"firebase/firestore\";\r\n\r\nexport const ChatService = {\r\n  async getUserData(userId) {\r\n    try {\r\n      const userRef = doc(db, \"users\", userId);\r\n      const userSnap = await getDoc(userRef);\r\n      if (userSnap.exists()) {\r\n        return userSnap.data();\r\n      } else {\r\n        // Create a new user document if it doesn't exist\r\n        const newUserData = { \r\n          name: \"\", \r\n          chatHistory: [],\r\n          created_at: serverTimestamp()\r\n        };\r\n        await setDoc(userRef, newUserData);\r\n        return newUserData;\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error getting user data:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async updateUserName(userId, name) {\r\n    try {\r\n      const userRef = doc(db, \"users\", userId);\r\n      await updateDoc(userRef, { \r\n        name: name,\r\n        updated_at: serverTimestamp()\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error updating user name:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async addMessageToHistory(userId, message, isUser) {\r\n    try {\r\n      const userRef = doc(db, \"users\", userId);\r\n      await updateDoc(userRef, {\r\n        chatHistory: arrayUnion({\r\n          content: message,\r\n          isUser: isUser,\r\n          timestamp: serverTimestamp()\r\n        }),\r\n        last_interaction: serverTimestamp()\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error adding message to history:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async getLastConversationSummary(userId) {\r\n    try {\r\n      const userData = await this.getUserData(userId);\r\n      \r\n      // If there's already a generated summary, use it\r\n      if (userData.last_conversation_summary) {\r\n        return userData.last_conversation_summary;\r\n      }\r\n      \r\n      const chatHistory = userData.chatHistory;\r\n      if (!chatHistory || chatHistory.length === 0) {\r\n        return null;\r\n      }\r\n\r\n      // Get the last 5 messages\r\n      const lastMessages = chatHistory.slice(-5);\r\n      const summaryText = lastMessages\r\n        .map((msg) => `${msg.isUser ? \"User\" : \"Bot\"}: ${msg.content}`)\r\n        .join(\"\\n\");\r\n\r\n      // Update the user document with the new summary\r\n      const userRef = doc(db, \"users\", userId);\r\n      await updateDoc(userRef, {\r\n        last_conversation_summary: summaryText\r\n      });\r\n\r\n      return summaryText;\r\n    } catch (error) {\r\n      console.error(\"Error getting conversation summary:\", error);\r\n      return null;\r\n    }\r\n  },\r\n\r\n  async clearChatHistory(userId) {\r\n    try {\r\n      const userRef = doc(db, \"users\", userId);\r\n      await updateDoc(userRef, {\r\n        chatHistory: [],\r\n        last_conversation_summary: null,\r\n        last_interaction: serverTimestamp()\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error clearing chat history:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}