{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\GUES\\\\Documents\\\\GitHub\\\\mindreader\\\\react\\\\src\\\\components\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"../assets/ChatBot.css\";\nimport { auth } from \"../firebase\";\nimport { ChatService } from \"../ChatService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Chatbot() {\n  _s();\n  const [isChatOpen, setIsChatOpen] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [user, setUser] = useState(null);\n  const [initialMessage, setInitialMessage] = useState(\"\");\n  const chatBoxContentRef = useRef(null);\n  useEffect(() => {\n    // Scroll to bottom when messages change\n    if (chatBoxContentRef.current) {\n      chatBoxContentRef.current.scrollTop = chatBoxContentRef.current.scrollHeight;\n    }\n  }, [messages]);\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged(async currentUser => {\n      if (currentUser) {\n        setUser(currentUser);\n        const userData = await ChatService.getUserData(currentUser.uid);\n        const lastSummary = await ChatService.getLastConversationSummary(currentUser.uid);\n        if (lastSummary) {\n          setInitialMessage(`Welcome back! Here's a summary of our last conversation:\\n${lastSummary}\\n\\nHow can I help you today?`);\n        } else {\n          setInitialMessage(\"Welcome! How can I assist you today?\");\n        }\n      } else {\n        setUser(null);\n        setInitialMessage(\"Welcome to our mental health chatbot! How can I assist you today?\");\n      }\n    });\n    return () => unsubscribe();\n  }, []);\n  const toggleChat = () => {\n    setIsChatOpen(!isChatOpen);\n  };\n  const sendMessage = async () => {\n    if (message.trim() !== \"\") {\n      setMessages(prevMessages => [...prevMessages, {\n        text: message,\n        sender: \"user\"\n      }]);\n      setMessage(\"\");\n      try {\n        let response;\n        if (user) {\n          const token = await user.getIdToken();\n          response = await fetch(\"http://localhost:8000/chat\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n              Authorization: `Bearer ${token}`\n            },\n            body: JSON.stringify({\n              message: message\n            })\n          });\n        } else {\n          response = await fetch(\"http://localhost:8000/chat/invoke\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n              input: {\n                message: message\n              },\n              config: {},\n              kwargs: {}\n            })\n          });\n        }\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        const botResponse = user ? data.response : data.output.content;\n        setMessages(prevMessages => [...prevMessages, {\n          text: botResponse,\n          sender: \"bot\"\n        }]);\n        if (user) {\n          await ChatService.addMessageToHistory(user.uid, message, true);\n          await ChatService.addMessageToHistory(user.uid, botResponse, false);\n        }\n      } catch (error) {\n        console.error(\"Error:\", error);\n        setMessages(prevMessages => [...prevMessages, {\n          text: \"Sorry, there was an error processing your request.\",\n          sender: \"bot\"\n        }]);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"chat-widget\",\n    children: [!isChatOpen && /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"chat-button\",\n      onClick: toggleChat,\n      children: \"Chat with us!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }, this), isChatOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"chat-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"chat-box-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Chat with us!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: toggleChat,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"chat-box-content\",\n        ref: chatBoxContentRef,\n        children: [initialMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-message bot-message\",\n          children: initialMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 15\n        }, this), messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `chat-message ${msg.sender}-message`,\n          children: msg.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"chat-box-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"user-input\",\n          placeholder: \"Type your message...\",\n          value: message,\n          onChange: e => setMessage(e.target.value),\n          onKeyPress: e => e.key === \"Enter\" && sendMessage()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"send-button\",\n          onClick: sendMessage,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n}\n_s(Chatbot, \"RDxHSfQwwrvsgdIB71YGHyg24/w=\");\n_c = Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","auth","ChatService","jsxDEV","_jsxDEV","Chatbot","_s","isChatOpen","setIsChatOpen","message","setMessage","messages","setMessages","user","setUser","initialMessage","setInitialMessage","chatBoxContentRef","current","scrollTop","scrollHeight","unsubscribe","onAuthStateChanged","currentUser","userData","getUserData","uid","lastSummary","getLastConversationSummary","toggleChat","sendMessage","trim","prevMessages","text","sender","response","token","getIdToken","fetch","method","headers","Authorization","body","JSON","stringify","input","config","kwargs","ok","Error","status","data","json","botResponse","output","content","addMessageToHistory","error","console","id","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","ref","className","map","msg","index","type","placeholder","value","onChange","e","target","onKeyPress","key","_c","$RefreshReg$"],"sources":["C:/Users/GUES/Documents/GitHub/mindreader/react/src/components/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport \"../assets/ChatBot.css\";\r\nimport { auth } from \"../firebase\";\r\nimport { ChatService } from \"../ChatService\";\r\n\r\nexport default function Chatbot() {\r\n  const [isChatOpen, setIsChatOpen] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [messages, setMessages] = useState([]);\r\n  const [user, setUser] = useState(null);\r\n  const [initialMessage, setInitialMessage] = useState(\"\");\r\n  const chatBoxContentRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Scroll to bottom when messages change\r\n    if (chatBoxContentRef.current) {\r\n      chatBoxContentRef.current.scrollTop =\r\n        chatBoxContentRef.current.scrollHeight;\r\n    }\r\n  }, [messages]);\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = auth.onAuthStateChanged(async (currentUser) => {\r\n      if (currentUser) {\r\n        setUser(currentUser);\r\n        const userData = await ChatService.getUserData(currentUser.uid);\r\n        const lastSummary = await ChatService.getLastConversationSummary(\r\n          currentUser.uid\r\n        );\r\n        if (lastSummary) {\r\n          setInitialMessage(\r\n            `Welcome back! Here's a summary of our last conversation:\\n${lastSummary}\\n\\nHow can I help you today?`\r\n          );\r\n        } else {\r\n          setInitialMessage(\"Welcome! How can I assist you today?\");\r\n        }\r\n      } else {\r\n        setUser(null);\r\n        setInitialMessage(\r\n          \"Welcome to our mental health chatbot! How can I assist you today?\"\r\n        );\r\n      }\r\n    });\r\n\r\n    return () => unsubscribe();\r\n  }, []);\r\n\r\n  const toggleChat = () => {\r\n    setIsChatOpen(!isChatOpen);\r\n  };\r\n\r\n  const sendMessage = async () => {\r\n    if (message.trim() !== \"\") {\r\n      setMessages((prevMessages) => [\r\n        ...prevMessages,\r\n        { text: message, sender: \"user\" },\r\n      ]);\r\n      setMessage(\"\");\r\n\r\n      try {\r\n        let response;\r\n        if (user) {\r\n          const token = await user.getIdToken();\r\n          response = await fetch(\"http://localhost:8000/chat\", {\r\n            method: \"POST\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              Authorization: `Bearer ${token}`,\r\n            },\r\n            body: JSON.stringify({ message: message }),\r\n          });\r\n        } else {\r\n          response = await fetch(\"http://localhost:8000/chat/invoke\", {\r\n            method: \"POST\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n              input: {\r\n                message: message,\r\n              },\r\n              config: {},\r\n              kwargs: {},\r\n            }),\r\n          });\r\n        }\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n        const botResponse = user ? data.response : data.output.content;\r\n\r\n        setMessages((prevMessages) => [\r\n          ...prevMessages,\r\n          { text: botResponse, sender: \"bot\" },\r\n        ]);\r\n\r\n        if (user) {\r\n          await ChatService.addMessageToHistory(user.uid, message, true);\r\n          await ChatService.addMessageToHistory(user.uid, botResponse, false);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error:\", error);\r\n        setMessages((prevMessages) => [\r\n          ...prevMessages,\r\n          {\r\n            text: \"Sorry, there was an error processing your request.\",\r\n            sender: \"bot\",\r\n          },\r\n        ]);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div id=\"chat-widget\">\r\n      {!isChatOpen && (\r\n        <button id=\"chat-button\" onClick={toggleChat}>\r\n          Chat with us!\r\n        </button>\r\n      )}\r\n\r\n      {isChatOpen && (\r\n        <div id=\"chat-box\">\r\n          <div id=\"chat-box-header\">\r\n            <span>Chat with us!</span>\r\n            <button onClick={toggleChat}>Close</button>\r\n          </div>\r\n          <div id=\"chat-box-content\" ref={chatBoxContentRef}>\r\n            {initialMessage && (\r\n              <div className=\"chat-message bot-message\">{initialMessage}</div>\r\n            )}\r\n            {messages.map((msg, index) => (\r\n              <div key={index} className={`chat-message ${msg.sender}-message`}>\r\n                {msg.text}\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <div id=\"chat-box-input\">\r\n            <input\r\n              type=\"text\"\r\n              id=\"user-input\"\r\n              placeholder=\"Type your message...\"\r\n              value={message}\r\n              onChange={(e) => setMessage(e.target.value)}\r\n              onKeyPress={(e) => e.key === \"Enter\" && sendMessage()}\r\n            />\r\n            <button id=\"send-button\" onClick={sendMessage}>\r\n              Send\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}