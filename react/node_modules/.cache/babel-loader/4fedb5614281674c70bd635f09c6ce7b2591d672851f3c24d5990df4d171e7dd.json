{"ast":null,"code":"import { db } from \"./firebase\";\nimport { doc, getDoc, setDoc, updateDoc, arrayUnion } from \"firebase/firestore\";\nexport const ChatService = {\n  async getUserData(userId) {\n    const userRef = doc(db, \"users\", userId);\n    const userSnap = await getDoc(userRef);\n    if (userSnap.exists()) {\n      return userSnap.data();\n    } else {\n      // Create a new user document if it doesn't exist\n      await setDoc(userRef, {\n        name: \"\",\n        chatHistory: []\n      });\n      return {\n        name: \"\",\n        chatHistory: []\n      };\n    }\n  },\n  async updateUserName(userId, name) {\n    const userRef = doc(db, \"users\", userId);\n    await updateDoc(userRef, {\n      name: name\n    });\n  },\n  async addMessageToHistory(userId, message, isUser) {\n    const userRef = doc(db, \"users\", userId);\n    await updateDoc(userRef, {\n      chatHistory: arrayUnion({\n        content: message,\n        isUser: isUser,\n        timestamp: new Date()\n      })\n    });\n  },\n  async getLastConversationSummary(userId) {\n    const userData = await this.getUserData(userId);\n    const chatHistory = userData.chatHistory;\n    if (chatHistory.length > 0) {\n      // Get the last 5 messages or all if less than 5\n      const lastMessages = chatHistory.slice(-5);\n      return lastMessages.map(msg => `${msg.isUser ? \"User\" : \"Bot\"}: ${msg.content}`).join(\"\\n\");\n    }\n    return null;\n  }\n};","map":{"version":3,"names":["db","doc","getDoc","setDoc","updateDoc","arrayUnion","ChatService","getUserData","userId","userRef","userSnap","exists","data","name","chatHistory","updateUserName","addMessageToHistory","message","isUser","content","timestamp","Date","getLastConversationSummary","userData","length","lastMessages","slice","map","msg","join"],"sources":["C:/Users/GUES/Documents/GitHub/mindreader/react/src/ChatService.js"],"sourcesContent":["import { db } from \"./firebase\";\r\nimport { doc, getDoc, setDoc, updateDoc, arrayUnion } from \"firebase/firestore\";\r\n\r\nexport const ChatService = {\r\n  async getUserData(userId) {\r\n    const userRef = doc(db, \"users\", userId);\r\n    const userSnap = await getDoc(userRef);\r\n    if (userSnap.exists()) {\r\n      return userSnap.data();\r\n    } else {\r\n      // Create a new user document if it doesn't exist\r\n      await setDoc(userRef, { name: \"\", chatHistory: [] });\r\n      return { name: \"\", chatHistory: [] };\r\n    }\r\n  },\r\n\r\n  async updateUserName(userId, name) {\r\n    const userRef = doc(db, \"users\", userId);\r\n    await updateDoc(userRef, { name: name });\r\n  },\r\n\r\n  async addMessageToHistory(userId, message, isUser) {\r\n    const userRef = doc(db, \"users\", userId);\r\n    await updateDoc(userRef, {\r\n      chatHistory: arrayUnion({\r\n        content: message,\r\n        isUser: isUser,\r\n        timestamp: new Date(),\r\n      }),\r\n    });\r\n  },\r\n\r\n  async getLastConversationSummary(userId) {\r\n    const userData = await this.getUserData(userId);\r\n    const chatHistory = userData.chatHistory;\r\n    if (chatHistory.length > 0) {\r\n      // Get the last 5 messages or all if less than 5\r\n      const lastMessages = chatHistory.slice(-5);\r\n      return lastMessages\r\n        .map((msg) => `${msg.isUser ? \"User\" : \"Bot\"}: ${msg.content}`)\r\n        .join(\"\\n\");\r\n    }\r\n    return null;\r\n  },\r\n};\r\n"],"mappings":"AAAA,SAASA,EAAE,QAAQ,YAAY;AAC/B,SAASC,GAAG,EAAEC,MAAM,EAAEC,MAAM,EAAEC,SAAS,EAAEC,UAAU,QAAQ,oBAAoB;AAE/E,OAAO,MAAMC,WAAW,GAAG;EACzB,MAAMC,WAAWA,CAACC,MAAM,EAAE;IACxB,MAAMC,OAAO,GAAGR,GAAG,CAACD,EAAE,EAAE,OAAO,EAAEQ,MAAM,CAAC;IACxC,MAAME,QAAQ,GAAG,MAAMR,MAAM,CAACO,OAAO,CAAC;IACtC,IAAIC,QAAQ,CAACC,MAAM,CAAC,CAAC,EAAE;MACrB,OAAOD,QAAQ,CAACE,IAAI,CAAC,CAAC;IACxB,CAAC,MAAM;MACL;MACA,MAAMT,MAAM,CAACM,OAAO,EAAE;QAAEI,IAAI,EAAE,EAAE;QAAEC,WAAW,EAAE;MAAG,CAAC,CAAC;MACpD,OAAO;QAAED,IAAI,EAAE,EAAE;QAAEC,WAAW,EAAE;MAAG,CAAC;IACtC;EACF,CAAC;EAED,MAAMC,cAAcA,CAACP,MAAM,EAAEK,IAAI,EAAE;IACjC,MAAMJ,OAAO,GAAGR,GAAG,CAACD,EAAE,EAAE,OAAO,EAAEQ,MAAM,CAAC;IACxC,MAAMJ,SAAS,CAACK,OAAO,EAAE;MAAEI,IAAI,EAAEA;IAAK,CAAC,CAAC;EAC1C,CAAC;EAED,MAAMG,mBAAmBA,CAACR,MAAM,EAAES,OAAO,EAAEC,MAAM,EAAE;IACjD,MAAMT,OAAO,GAAGR,GAAG,CAACD,EAAE,EAAE,OAAO,EAAEQ,MAAM,CAAC;IACxC,MAAMJ,SAAS,CAACK,OAAO,EAAE;MACvBK,WAAW,EAAET,UAAU,CAAC;QACtBc,OAAO,EAAEF,OAAO;QAChBC,MAAM,EAAEA,MAAM;QACdE,SAAS,EAAE,IAAIC,IAAI,CAAC;MACtB,CAAC;IACH,CAAC,CAAC;EACJ,CAAC;EAED,MAAMC,0BAA0BA,CAACd,MAAM,EAAE;IACvC,MAAMe,QAAQ,GAAG,MAAM,IAAI,CAAChB,WAAW,CAACC,MAAM,CAAC;IAC/C,MAAMM,WAAW,GAAGS,QAAQ,CAACT,WAAW;IACxC,IAAIA,WAAW,CAACU,MAAM,GAAG,CAAC,EAAE;MAC1B;MACA,MAAMC,YAAY,GAAGX,WAAW,CAACY,KAAK,CAAC,CAAC,CAAC,CAAC;MAC1C,OAAOD,YAAY,CAChBE,GAAG,CAAEC,GAAG,IAAK,GAAGA,GAAG,CAACV,MAAM,GAAG,MAAM,GAAG,KAAK,KAAKU,GAAG,CAACT,OAAO,EAAE,CAAC,CAC9DU,IAAI,CAAC,IAAI,CAAC;IACf;IACA,OAAO,IAAI;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}