{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\GUES\\\\Documents\\\\GitHub\\\\mindreader\\\\react\\\\src\\\\components\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"../assets/ChatBot.css\";\nimport { auth } from \"../firebase\";\nimport { ChatService } from \"../ChatService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Chatbot() {\n  _s();\n  const [isChatOpen, setIsChatOpen] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [user, setUser] = useState(null);\n  const [initialMessage, setInitialMessage] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const chatBoxContentRef = useRef(null);\n\n  // Scroll to bottom when messages change\n  useEffect(() => {\n    if (chatBoxContentRef.current) {\n      chatBoxContentRef.current.scrollTop = chatBoxContentRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  // Handle authentication and initial message\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged(async currentUser => {\n      try {\n        if (currentUser) {\n          console.log(\"User authenticated:\", currentUser.uid);\n          setUser(currentUser);\n          const userData = await ChatService.getUserData(currentUser.uid);\n          const lastSummary = await ChatService.getLastConversationSummary(currentUser.uid);\n          if (lastSummary) {\n            setInitialMessage(`Welcome back! Here's a summary of our last conversation:\\n${lastSummary}\\n\\nHow can I help you today?`);\n          } else {\n            setInitialMessage(\"Welcome! How can I assist you today?\");\n          }\n        } else {\n          console.log(\"No user authenticated\");\n          setUser(null);\n          setInitialMessage(\"Welcome to our mental health chatbot! How can I assist you today?\");\n        }\n      } catch (error) {\n        console.error(\"Error during authentication check:\", error);\n        setError(\"Error loading user data\");\n      }\n    });\n    return () => unsubscribe();\n  }, []);\n  const toggleChat = () => {\n    setIsChatOpen(!isChatOpen);\n    if (!isChatOpen) {\n      setError(null); // Clear any errors when opening chat\n    }\n  };\n  const sendMessage = async () => {\n    if (message.trim() === \"\") return;\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      // Add user message to chat immediately\n      const userMessage = {\n        text: message,\n        sender: \"user\"\n      };\n      setMessages(prevMessages => [...prevMessages, userMessage]);\n\n      // Clear input field\n      setMessage(\"\");\n      let response;\n      if (user) {\n        // Authenticated request\n        const token = await user.getIdToken();\n        console.log(\"Sending authenticated request with token\");\n        response = await fetch(\"http://localhost:8000/chat\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${token}`\n          },\n          body: JSON.stringify({\n            message: userMessage.text\n          })\n        });\n      } else {\n        // Non-authenticated request\n        console.log(\"Sending non-authenticated request\");\n        response = await fetch(\"http://localhost:8000/chat/invoke\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            input: {\n              message: userMessage.text\n            }\n          })\n        });\n      }\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log(\"Response data:\", data);\n\n      // Extract bot response based on authentication status\n      const botResponse = user ? data.response : data.output.content;\n\n      // Add bot response to chat\n      setMessages(prevMessages => [...prevMessages, {\n        text: botResponse,\n        sender: \"bot\"\n      }]);\n\n      // If user is authenticated, save to history\n      if (user) {\n        await ChatService.addMessageToHistory(user.uid, userMessage.text, true);\n        await ChatService.addMessageToHistory(user.uid, botResponse, false);\n      }\n    } catch (error) {\n      console.error(\"Error in sendMessage:\", error);\n      setError(\"Failed to send message. Please try again.\");\n      setMessages(prevMessages => [...prevMessages, {\n        text: \"Sorry, there was an error processing your request. Please try again.\",\n        sender: \"bot\"\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleKeyPress = e => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      sendMessage();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"chat-widget\",\n    children: [!isChatOpen && /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"chat-button\",\n      onClick: toggleChat,\n      children: \"Chat with us!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }, this), isChatOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"chat-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"chat-box-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Chat with us!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: toggleChat,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"chat-box-content\",\n        ref: chatBoxContentRef,\n        children: [initialMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-message bot-message\",\n          children: initialMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 15\n        }, this), messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `chat-message ${msg.sender}-message`,\n          style: {\n            opacity: msg.sending ? 0.7 : 1\n          },\n          children: msg.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 15\n        }, this)), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-message bot-message\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"typing-indicator\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 15\n        }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error-message\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 23\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"chat-box-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"user-input\",\n          placeholder: \"Type your message...\",\n          value: message,\n          onChange: e => setMessage(e.target.value),\n          onKeyPress: handleKeyPress,\n          disabled: isLoading,\n          rows: \"1\",\n          style: {\n            resize: \"none\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"send-button\",\n          onClick: sendMessage,\n          disabled: isLoading || message.trim() === \"\",\n          children: isLoading ? \"...\" : \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 5\n  }, this);\n}\n_s(Chatbot, \"esKMdt3XDeiTwREhRzdW/bAzcK0=\");\n_c = Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","auth","ChatService","jsxDEV","_jsxDEV","Chatbot","_s","isChatOpen","setIsChatOpen","message","setMessage","messages","setMessages","user","setUser","initialMessage","setInitialMessage","isLoading","setIsLoading","error","setError","chatBoxContentRef","current","scrollTop","scrollHeight","unsubscribe","onAuthStateChanged","currentUser","console","log","uid","userData","getUserData","lastSummary","getLastConversationSummary","toggleChat","sendMessage","trim","userMessage","text","sender","prevMessages","response","token","getIdToken","fetch","method","headers","Authorization","body","JSON","stringify","input","ok","Error","status","data","json","botResponse","output","content","addMessageToHistory","handleKeyPress","e","key","shiftKey","preventDefault","id","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","ref","className","map","msg","index","style","opacity","sending","placeholder","value","onChange","target","onKeyPress","disabled","rows","resize","_c","$RefreshReg$"],"sources":["C:/Users/GUES/Documents/GitHub/mindreader/react/src/components/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport \"../assets/ChatBot.css\";\r\nimport { auth } from \"../firebase\";\r\nimport { ChatService } from \"../ChatService\";\r\n\r\nexport default function Chatbot() {\r\n  const [isChatOpen, setIsChatOpen] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [messages, setMessages] = useState([]);\r\n  const [user, setUser] = useState(null);\r\n  const [initialMessage, setInitialMessage] = useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const chatBoxContentRef = useRef(null);\r\n\r\n  // Scroll to bottom when messages change\r\n  useEffect(() => {\r\n    if (chatBoxContentRef.current) {\r\n      chatBoxContentRef.current.scrollTop = chatBoxContentRef.current.scrollHeight;\r\n    }\r\n  }, [messages]);\r\n\r\n  // Handle authentication and initial message\r\n  useEffect(() => {\r\n    const unsubscribe = auth.onAuthStateChanged(async (currentUser) => {\r\n      try {\r\n        if (currentUser) {\r\n          console.log(\"User authenticated:\", currentUser.uid);\r\n          setUser(currentUser);\r\n          const userData = await ChatService.getUserData(currentUser.uid);\r\n          const lastSummary = await ChatService.getLastConversationSummary(\r\n            currentUser.uid\r\n          );\r\n          if (lastSummary) {\r\n            setInitialMessage(\r\n              `Welcome back! Here's a summary of our last conversation:\\n${lastSummary}\\n\\nHow can I help you today?`\r\n            );\r\n          } else {\r\n            setInitialMessage(\"Welcome! How can I assist you today?\");\r\n          }\r\n        } else {\r\n          console.log(\"No user authenticated\");\r\n          setUser(null);\r\n          setInitialMessage(\r\n            \"Welcome to our mental health chatbot! How can I assist you today?\"\r\n          );\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error during authentication check:\", error);\r\n        setError(\"Error loading user data\");\r\n      }\r\n    });\r\n\r\n    return () => unsubscribe();\r\n  }, []);\r\n\r\n  const toggleChat = () => {\r\n    setIsChatOpen(!isChatOpen);\r\n    if (!isChatOpen) {\r\n      setError(null); // Clear any errors when opening chat\r\n    }\r\n  };\r\n\r\n  const sendMessage = async () => {\r\n    if (message.trim() === \"\") return;\r\n\r\n    try {\r\n      setIsLoading(true);\r\n      setError(null);\r\n\r\n      // Add user message to chat immediately\r\n      const userMessage = { text: message, sender: \"user\" };\r\n      setMessages((prevMessages) => [...prevMessages, userMessage]);\r\n      \r\n      // Clear input field\r\n      setMessage(\"\");\r\n\r\n      let response;\r\n      if (user) {\r\n        // Authenticated request\r\n        const token = await user.getIdToken();\r\n        console.log(\"Sending authenticated request with token\");\r\n        \r\n        response = await fetch(\"http://localhost:8000/chat\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n          body: JSON.stringify({\r\n            message: userMessage.text,\r\n          }),\r\n        });\r\n      } else {\r\n        // Non-authenticated request\r\n        console.log(\"Sending non-authenticated request\");\r\n        \r\n        response = await fetch(\"http://localhost:8000/chat/invoke\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            input: {\r\n              message: userMessage.text,\r\n            },\r\n          }),\r\n        });\r\n      }\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log(\"Response data:\", data);\r\n\r\n      // Extract bot response based on authentication status\r\n      const botResponse = user ? data.response : data.output.content;\r\n\r\n      // Add bot response to chat\r\n      setMessages((prevMessages) => [\r\n        ...prevMessages,\r\n        { text: botResponse, sender: \"bot\" },\r\n      ]);\r\n\r\n      // If user is authenticated, save to history\r\n      if (user) {\r\n        await ChatService.addMessageToHistory(user.uid, userMessage.text, true);\r\n        await ChatService.addMessageToHistory(user.uid, botResponse, false);\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error(\"Error in sendMessage:\", error);\r\n      setError(\"Failed to send message. Please try again.\");\r\n      setMessages((prevMessages) => [\r\n        ...prevMessages,\r\n        {\r\n          text: \"Sorry, there was an error processing your request. Please try again.\",\r\n          sender: \"bot\",\r\n        },\r\n      ]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === \"Enter\" && !e.shiftKey) {\r\n      e.preventDefault();\r\n      sendMessage();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div id=\"chat-widget\">\r\n      {!isChatOpen && (\r\n        <button id=\"chat-button\" onClick={toggleChat}>\r\n          Chat with us!\r\n        </button>\r\n      )}\r\n\r\n      {isChatOpen && (\r\n        <div id=\"chat-box\">\r\n          <div id=\"chat-box-header\">\r\n            <span>Chat with us!</span>\r\n            <button onClick={toggleChat}>Close</button>\r\n          </div>\r\n\r\n          <div id=\"chat-box-content\" ref={chatBoxContentRef}>\r\n            {/* Initial welcome message */}\r\n            {initialMessage && (\r\n              <div className=\"chat-message bot-message\">{initialMessage}</div>\r\n            )}\r\n\r\n            {/* Chat messages */}\r\n            {messages.map((msg, index) => (\r\n              <div\r\n                key={index}\r\n                className={`chat-message ${msg.sender}-message`}\r\n                style={{\r\n                  opacity: msg.sending ? 0.7 : 1,\r\n                }}\r\n              >\r\n                {msg.text}\r\n              </div>\r\n            ))}\r\n\r\n            {/* Loading indicator */}\r\n            {isLoading && (\r\n              <div className=\"chat-message bot-message\">\r\n                <div className=\"typing-indicator\">\r\n                  <span></span>\r\n                  <span></span>\r\n                  <span></span>\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {/* Error message */}\r\n            {error && <div className=\"error-message\">{error}</div>}\r\n          </div>\r\n\r\n          <div id=\"chat-box-input\">\r\n            <textarea\r\n              id=\"user-input\"\r\n              placeholder=\"Type your message...\"\r\n              value={message}\r\n              onChange={(e) => setMessage(e.target.value)}\r\n              onKeyPress={handleKeyPress}\r\n              disabled={isLoading}\r\n              rows=\"1\"\r\n              style={{ resize: \"none\" }}\r\n            />\r\n            <button\r\n              id=\"send-button\"\r\n              onClick={sendMessage}\r\n              disabled={isLoading || message.trim() === \"\"}\r\n            >\r\n              {isLoading ? \"...\" : \"Send\"}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}